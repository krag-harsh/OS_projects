diff -ruN linux-5.9.1/arch/x86/entry/syscalls/syscall_64.tbl /usr/src/linux-5.9.1/arch/x86/entry/syscalls/syscall_64.tbl
--- linux-5.9.1/arch/x86/entry/syscalls/syscall_64.tbl	2020-10-17 12:01:22.000000000 +0530
+++ /usr/src/linux-5.9.1/arch/x86/entry/syscalls/syscall_64.tbl	2020-10-31 16:00:56.550885850 +0530
@@ -404,3 +404,4 @@
 545	x32	execveat		compat_sys_execveat
 546	x32	preadv2			compat_sys_preadv64v2
 547	x32	pwritev2		compat_sys_pwritev64v2
+548	64	rtnice			sys_rtnice
diff -ruN linux-5.9.1/include/linux/sched.h /usr/src/linux-5.9.1/include/linux/sched.h
--- linux-5.9.1/include/linux/sched.h	2020-10-17 12:01:22.000000000 +0530
+++ /usr/src/linux-5.9.1/include/linux/sched.h	2020-10-31 09:17:15.540042434 +0530
@@ -457,6 +457,7 @@
 	u64				exec_start;
 	u64				sum_exec_runtime;
 	u64				vruntime;
+	u64 			rtnice;
 	u64				prev_sum_exec_runtime;
 
 	u64				nr_migrations;
diff -ruN linux-5.9.1/include/linux/syscalls.h /usr/src/linux-5.9.1/include/linux/syscalls.h
--- linux-5.9.1/include/linux/syscalls.h	2020-10-17 12:01:22.000000000 +0530
+++ /usr/src/linux-5.9.1/include/linux/syscalls.h	2020-10-31 16:03:31.264211242 +0530
@@ -1345,4 +1345,5 @@
 		int __user *optlen);
 int __sys_setsockopt(int fd, int level, int optname, char __user *optval,
 		int optlen);
+asmlinkage long sys_rtnice(int pid, long rtval);
 #endif
diff -ruN linux-5.9.1/kernel/sched/core.c /usr/src/linux-5.9.1/kernel/sched/core.c
--- linux-5.9.1/kernel/sched/core.c	2020-10-17 12:01:22.000000000 +0530
+++ /usr/src/linux-5.9.1/kernel/sched/core.c	2020-10-31 09:20:21.773121320 +0530
@@ -3069,6 +3069,7 @@
 	p->se.sum_exec_runtime		= 0;
 	p->se.prev_sum_exec_runtime	= 0;
 	p->se.nr_migrations		= 0;
+	p->se.rtnice = 0;
 	p->se.vruntime			= 0;
 	INIT_LIST_HEAD(&p->se.group_node);
 
diff -ruN linux-5.9.1/kernel/sched/fair.c /usr/src/linux-5.9.1/kernel/sched/fair.c
--- linux-5.9.1/kernel/sched/fair.c	2020-10-17 12:01:22.000000000 +0530
+++ /usr/src/linux-5.9.1/kernel/sched/fair.c	2020-10-31 16:16:30.665754489 +0530
@@ -534,7 +534,20 @@
 static inline int entity_before(struct sched_entity *a,
 				struct sched_entity *b)
 {
-	return (s64)(a->vruntime - b->vruntime) < 0;
+	if(a->rtnice>0 && b->rtnice>0)
+	{
+		return (s64)(a->rtnice - b->rtnice) < 0;
+	}
+	else if(a->rtnice>0 || b->rtnice>0)
+	{
+		if(a->rtnice > b->rtnice)
+			return 1;
+		else
+			return 0;
+	}
+	else
+		return (s64)(a->vruntime - b->vruntime) < 0;
+	//return (s64)(a->vruntime - b->vruntime) < 0;
 }
 
 static void update_min_vruntime(struct cfs_rq *cfs_rq)
@@ -860,7 +873,19 @@
 	curr->sum_exec_runtime += delta_exec;
 	schedstat_add(cfs_rq->exec_clock, delta_exec);
 
-	curr->vruntime += calc_delta_fair(delta_exec, curr);
+
+	//curr->vruntime += calc_delta_fair(delta_exec, curr);
+	if(curr->rtnice==0)
+		curr->vruntime += calc_delta_fair(delta_exec, curr);
+	else
+	{
+		if(curr->sr_prio > delta_exec)
+			curr->sr_prio-=delta_exec;
+		else
+			curr->sr_prio = 0;
+	}
+	
+	
 	update_min_vruntime(cfs_rq);
 
 	if (entity_is_task(curr)) {
diff -ruN linux-5.9.1/Makefile /usr/src/linux-5.9.1/Makefile
--- linux-5.9.1/Makefile	2020-10-17 12:01:22.000000000 +0530
+++ /usr/src/linux-5.9.1/Makefile	2020-10-31 15:59:23.848553428 +0530
@@ -1094,7 +1094,7 @@
 export MODULES_NSDEPS := $(extmod-prefix)modules.nsdeps
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/ rtnice/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff -ruN linux-5.9.1/rtnice/Makefile /usr/src/linux-5.9.1/rtnice/Makefile
--- linux-5.9.1/rtnice/Makefile	1970-01-01 05:30:00.000000000 +0530
+++ /usr/src/linux-5.9.1/rtnice/Makefile	2020-10-31 15:58:07.374331779 +0530
@@ -0,0 +1 @@
+obj-y:=rtnice.o
diff -ruN linux-5.9.1/rtnice/rtnice.c /usr/src/linux-5.9.1/rtnice/rtnice.c
--- linux-5.9.1/rtnice/rtnice.c	1970-01-01 05:30:00.000000000 +0530
+++ /usr/src/linux-5.9.1/rtnice/rtnice.c	2020-10-31 15:57:03.334324726 +0530
@@ -0,0 +1,43 @@
+/*HARSH KUMAR AGARWAL
+2019423*/
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/sched.h>
+#include <linux/syscalls.h>
+#include <linux/module.h>
+#include <linux/mm.h>
+#include <linux/errno.h>
+
+asmlinkage long sys_rtnice(int pid, long rtval) 
+{
+	printk("passed values:\npid : %d \nrtval : %ld\n",pid,rtval);
+
+	unsigned long long rtvalstore=rtval*1000000000;
+	struct task_struct *task;
+	int flag=0;
+
+	if (rtval < 0 || pid<0 || pid>32768)
+		return -EINVAL;
+
+	for_each_process(task) 
+	{
+		if (task->pid == pid) 
+		{
+			flag = 1;
+			task->se.rtnice = rtvalstore;
+			printk("rtnice value changed to: %ld\n", rtvalstore);
+			break;
+		}
+	}
+
+	if (flag == 0) 
+	{
+		printk("The process was not found with the given PID number");
+		return -ESRCH;
+	}
+
+	printk("\nat the end of the rtnice code\n");
+	
+	return 0;
+}
+
