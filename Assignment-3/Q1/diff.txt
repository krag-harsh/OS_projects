diff -ruN linux-5.9.1/arch/x86/entry/syscalls/syscall_64.tbl /usr/src/linux-5.9.1/arch/x86/entry/syscalls/syscall_64.tbl
--- linux-5.9.1/arch/x86/entry/syscalls/syscall_64.tbl	2020-10-17 12:01:22.000000000 +0530
+++ /usr/src/linux-5.9.1/arch/x86/entry/syscalls/syscall_64.tbl	2020-11-12 13:51:19.900389658 +0530
@@ -404,3 +404,4 @@
 545	x32	execveat		compat_sys_execveat
 546	x32	preadv2			compat_sys_preadv64v2
 547	x32	pwritev2		compat_sys_pwritev64v2
+548 64	rtnice			sys_rtnice
diff -ruN linux-5.9.1/include/linux/sched.h /usr/src/linux-5.9.1/include/linux/sched.h
--- linux-5.9.1/include/linux/sched.h	2020-10-17 12:01:22.000000000 +0530
+++ /usr/src/linux-5.9.1/include/linux/sched.h	2020-11-12 13:55:30.373575606 +0530
@@ -457,6 +457,7 @@
 	u64				exec_start;
 	u64				sum_exec_runtime;
 	u64				vruntime;
+	u64 			rtnice;
 	u64				prev_sum_exec_runtime;
 
 	u64				nr_migrations;
diff -ruN linux-5.9.1/kernel/sched/core.c /usr/src/linux-5.9.1/kernel/sched/core.c
--- linux-5.9.1/kernel/sched/core.c	2020-10-17 12:01:22.000000000 +0530
+++ /usr/src/linux-5.9.1/kernel/sched/core.c	2020-11-12 13:58:33.321012321 +0530
@@ -3070,6 +3070,7 @@
 	p->se.prev_sum_exec_runtime	= 0;
 	p->se.nr_migrations		= 0;
 	p->se.vruntime			= 0;
+	p->se.rtnice 			= 0;
 	INIT_LIST_HEAD(&p->se.group_node);
 
 #ifdef CONFIG_FAIR_GROUP_SCHED
diff -ruN linux-5.9.1/kernel/sched/fair.c /usr/src/linux-5.9.1/kernel/sched/fair.c
--- linux-5.9.1/kernel/sched/fair.c	2020-10-17 12:01:22.000000000 +0530
+++ /usr/src/linux-5.9.1/kernel/sched/fair.c	2020-11-12 14:08:17.524996228 +0530
@@ -849,6 +849,21 @@
 		return;
 
 	delta_exec = now - curr->exec_start;
+
+	//editing for assignment 3
+	
+	//curr->vruntime += calc_delta_fair(delta_exec, curr);
+	if(curr->rtnice!=0)
+	{
+		//printk("updating rtnice value");
+		if(curr->rtnice > delta_exec)
+			curr->rtnice-=delta_exec;
+		else
+			curr->rtnice = 0;
+	}
+
+	//editing done
+
 	if (unlikely((s64)delta_exec <= 0))
 		return;
 
@@ -4475,6 +4490,49 @@
 
 	clear_buddies(cfs_rq, se);
 
+	//changes for assignment 3
+
+	struct task_struct *task;
+	u64 minval = 0;
+	//printk("Inside pick_next_entity function");
+	for_each_process(task)
+	{
+		if(task->se.rtnice > 0)
+		{
+			//printk("\nfound task with rtnice value > 0\n");
+			if(task->se.on_rq)
+			{
+				//printk("\ninside another if function task->se.on_rq");
+				if(task->se.rtnice > minval)
+				{
+					se= &(task->se);
+					minval=task->se.rtnice;
+					//printk("\nValue found and changed");
+					//return se;
+				}
+
+			}
+		}
+
+
+		// if(task->se.on_rq == 1 && task->se.rtnice > minval)
+		// {
+		// 	se= &(task->se);
+		// 	minval=task->se.rtnice;
+		// 	printk("Value found and changed");
+		// }
+
+		// if(task->se.on_rq && task->se.rtnice > 0)
+		// {
+		// 	se= &(task->se);
+		// 	//minval=task->se.rtnice;
+		// 	printk("Value found and changed");
+		// 	break;
+		// }
+	}
+
+	//editing done
+
 	return se;
 }
 
diff -ruN linux-5.9.1/Makefile /usr/src/linux-5.9.1/Makefile
--- linux-5.9.1/Makefile	2020-10-17 12:01:22.000000000 +0530
+++ /usr/src/linux-5.9.1/Makefile	2020-11-12 13:50:03.626268018 +0530
@@ -1094,7 +1094,7 @@
 export MODULES_NSDEPS := $(extmod-prefix)modules.nsdeps
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/ rtnice/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff -ruN linux-5.9.1/rtnice/Makefile /usr/src/linux-5.9.1/rtnice/Makefile
--- linux-5.9.1/rtnice/Makefile	1970-01-01 05:30:00.000000000 +0530
+++ /usr/src/linux-5.9.1/rtnice/Makefile	2020-11-12 13:21:47.995378772 +0530
@@ -0,0 +1 @@
+obj-y:=rtnice.o
\ No newline at end of file
diff -ruN linux-5.9.1/rtnice/rtnice.c /usr/src/linux-5.9.1/rtnice/rtnice.c
--- linux-5.9.1/rtnice/rtnice.c	1970-01-01 05:30:00.000000000 +0530
+++ /usr/src/linux-5.9.1/rtnice/rtnice.c	2020-11-12 13:21:25.644207704 +0530
@@ -0,0 +1,44 @@
+/*HARSH KUMAR AGARWAL
+2019423*/
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/sched.h>
+#include <linux/syscalls.h>
+#include <linux/module.h>
+#include <linux/mm.h>
+#include <linux/errno.h>
+
+SYSCALL_DEFINE2(rtnice, int, pid, long, rtval)
+{
+	printk("passed values:\npid : %d \nrtval : %ld\n",pid,rtval);
+
+	// unsigned long long rtvalstore=rtval*1000000000;
+	unsigned long long rtvalstore=rtval*1;
+	struct task_struct *task;
+	int flag=0;
+
+	if (rtval < 0 || pid<0 || pid>32768)
+		return -EINVAL;
+
+	for_each_process(task) 
+	{
+		if (task->pid == pid) 
+		{
+			flag = 1;
+			task->se.rtnice = rtvalstore;
+			printk("rtnice value changed to: %lld\n", task->se.rtnice);
+			break;
+		}
+	}
+
+	if (flag == 0) 
+	{
+		printk("The process was not found with the given PID number");
+		return -1;
+	}
+
+	printk("at the end of the rtnice code\n");
+	
+	return 0;
+}
+
