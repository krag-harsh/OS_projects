diff -ruN linux-5.9.1-original/arch/x86/entry/syscalls/syscall_64.tbl /usr/src/linux-5.9.1/arch/x86/entry/syscalls/syscall_64.tbl
--- linux-5.9.1-original/arch/x86/entry/syscalls/syscall_64.tbl	2020-10-17 12:01:22.000000000 +0530
+++ /usr/src/linux-5.9.1/arch/x86/entry/syscalls/syscall_64.tbl	2020-10-27 23:43:17.770926186 +0530
@@ -404,3 +404,4 @@
 545	x32	execveat		compat_sys_execveat
 546	x32	preadv2			compat_sys_preadv64v2
 547	x32	pwritev2		compat_sys_pwritev64v2
+548	64	sh_task_info		sys_sh_task_info
diff -ruN linux-5.9.1-original/Makefile /usr/src/linux-5.9.1/Makefile
--- linux-5.9.1-original/Makefile	2020-10-17 12:01:22.000000000 +0530
+++ /usr/src/linux-5.9.1/Makefile	2020-10-27 23:40:49.596879334 +0530
@@ -1094,7 +1094,7 @@
 export MODULES_NSDEPS := $(extmod-prefix)modules.nsdeps
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/ sh_task_info/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff -ruN linux-5.9.1-original/sh_task_info/Makefile /usr/src/linux-5.9.1/sh_task_info/Makefile
--- linux-5.9.1-original/sh_task_info/Makefile	1970-01-01 05:30:00.000000000 +0530
+++ /usr/src/linux-5.9.1/sh_task_info/Makefile	2020-10-27 23:39:29.584895040 +0530
@@ -0,0 +1 @@
+obj-y:=sh_task_info.o
diff -ruN linux-5.9.1-original/sh_task_info/sh_task_info.c /usr/src/linux-5.9.1/sh_task_info/sh_task_info.c
--- linux-5.9.1-original/sh_task_info/sh_task_info.c	1970-01-01 05:30:00.000000000 +0530
+++ /usr/src/linux-5.9.1/sh_task_info/sh_task_info.c	2020-10-27 23:38:58.641431699 +0530
@@ -0,0 +1,87 @@
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/signal.h>
+#include <linux/sched.h>
+#include <linux/syscalls.h>
+#include <linux/file.h>
+#include <linux/fs.h>
+#include <linux/fcntl.h>
+#include <linux/module.h>
+#include <linux/unistd.h>
+#include <linux/errno.h>
+#include <asm/uaccess.h>
+#include <linux/string.h>
+
+//asmlinkage long __x64_sys_hello(int pidno, char *filename)
+SYSCALL_DEFINE2(sh_task_info, int, pidno, char __user *, filename)
+{
+
+    // printk("Hello world1\n");
+    // printk("value access of pid first time = %d\n",pidno);
+    int len= strlen(filename);
+    len++;
+
+    //int pidno=1;
+    if (pidno <= 0 || pidno > 32768)
+		return -EINVAL;
+
+	struct task_struct *task;
+	int flag = 0;
+
+
+	struct file *file;
+	loff_t pos = 0;
+	mm_segment_t old_fs = get_fs();
+	set_fs(KERNEL_DS);
+	char buffer[2000];
+
+	char buffilename[256];
+	copy_from_user(buffilename,filename,len);
+	// printk("next line will create file using filename passed %s\n",buffilename);
+	file = filp_open(buffilename, O_WRONLY|O_CREAT, 0644);
+
+
+	for_each_process(task)
+	{
+		if (pidno==(task->pid))
+		{
+			flag = 1;
+			printk("\nPROCESS: %s\n PID_NUMBER: %ld\n \
+					  PROCESS STATE: %ld\n PRIORITY: %ld\n RT_PRIORITY: %ld\n",
+					  task->comm, (long)task_pid_nr(task), \
+					  (long)task->state, (long)task->prio, \
+					  (long)task->rt_priority);
+
+
+
+			void *outputfile;
+			sprintf(buffer, "\nProcess: %s\n \
+				PID_NUMBER: %ld\n PROCESS STATE: %ld\n \
+				PRIORITY: %ld\n RT_PRIORITY: %ld\n",
+				task->comm, (long)task_pid_nr(task), \
+				(long)task->state, (long)task->prio, \
+				(long)task->rt_priority);
+
+			outputfile = buffer;
+			if (file)
+			{	
+				vfs_write(file, outputfile, strlen(buffer), &pos);
+				filp_close(file,NULL);
+				// printk("\ninside if(file)\n");
+			}
+			else
+				return -ENOENT;
+			
+		}
+	}
+	set_fs(old_fs);
+
+	// printk("GOOD JOB");
+
+	if(flag==0)
+		return 1;
+
+    return 0;
+}
+
+